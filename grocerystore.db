CREATE DATABASE GroceryStoreDB;

USE GroceryStoreDB;

CREATE TABLE Customers (
customer_id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100),
email VARCHAR(100),
phone_number VARCHAR(15),
address VARCHAR(255)
);

CREATE TABLE Products (
product_id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100),
category VARCHAR(50),
price DECIMAL(10, 2),
stock_quantity INT
);

CREATE TABLE Orders (
order_id INT AUTO_INCREMENT PRIMARY KEY,
customer_id INT,
order_date DATE,
total_amount DECIMAL(10, 2),
FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE OrderDetails (
order_detail_id INT AUTO_INCREMENT PRIMARY KEY,
order_id INT,
product_id INT,
quantity INT,
price DECIMAL(10, 2),
FOREIGN KEY (order_id) REFERENCES Orders(order_id),
FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Suppliers (
supplier_id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100),
contact_number VARCHAR(15),
email VARCHAR(100),
address VARCHAR(255)
);

CREATE TABLE Stock (
stock_id INT AUTO_INCREMENT PRIMARY KEY,
product_id INT,
supplier_id INT,
quantity INT,
date_added DATE,
FOREIGN KEY (product_id) REFERENCES Products(product_id),
FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
);

DELIMITER //

CREATE TRIGGER update_stock_quantity
AFTER INSERT ON OrderDetails
FOR EACH ROW
BEGIN
UPDATE Products
SET stock_quantity = stock_quantity - NEW.quantity
WHERE product_id = NEW.product_id;
END//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE getTotalSales(IN startDate VARCHAR(255), IN endDate VARCHAR(255))
BEGIN
DECLARE formatted_startDate DATE;
DECLARE formatted_endDate DATE;

SET formatted_startDate = STR_TO_DATE(startDate, '%d-%m-%Y');
SET formatted_endDate = STR_TO_DATE(endDate, '%d-%m-%Y');

SELECT SUM(total_amount) AS total_sales
FROM Orders
WHERE order_date BETWEEN formatted_startDate AND formatted_endDate;
END//

DELIMITER ;
